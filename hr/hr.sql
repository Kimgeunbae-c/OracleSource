-- EMPLOUEES (SCOTT의 EMP통일개념) // EMP보다 크다
-- FRIST_NAME, LAST_NAME, JOB_ID 조회
SELECT
	E.FIRST_NAME,
	E.LAST_NAME,
	E.JOB_ID
FROM
	EMPLOYEES e; 

-- job_id 중복 제외
SELECT
	DISTINCT E.JOB_ID
FROM
	EMPLOYEES e 
	
-- 사번이 176인 사원의 LAST_NAME과 부서번호 조회
SELECT
	E.LAST_NAME,
	E.DEPARTMENT_ID
FROM
	EMPLOYEES e
WHERE
	E.EMPLOYEE_ID = 176

-- 급여가 12000이상되는 사원의 LASE_NAME과 급여율 조회
	SELECT
	E.LAST_NAME,
	E.SALARY
FROM
	EMPLOYEES e
WHERE
	E.SALARY >= 12000 ;
-- 급여가 5000 ~ 12000 범위가 아닌 사원의 LAST_NAME과 급여율 조회
SELECT
	E.LAST_NAME,
	E.SALARY
FROM
	EMPLOYEES e
WHERE
	E.SALARY NOT BETWEEN 5000 AND 20000


SELECT
	E.LAST_NAME,
	E.SALARY
FROM
	EMPLOYEES e
WHERE
	E.SALARY >12000
	OR E.SALARY < 5000;


-- IN 
-- 20, 50번 부서에 근무하는 사원 조회(LAST_NAME, 부서번호), LAST_NAME 오름차순
SELECT
	E.LAST_NAME,
	E.DEPARTMENT_ID
FROM
	EMPLOYEES e
WHERE
	E.DEPARTMENT_ID IN (20, 50)
ORDER BY
	E.LAST_NAME ASC

-- SALARY가 2500, 3500, 7000 이며, JOB이 SA_REP, ST_CLERK가 아닌 사원 조회
SELECT
	*
FROM
	EMPLOYEES e
WHERE
	E.SALARY NOT IN (2500, 3500, 7000)
	AND E.JOB_ID NOT IN ('SA_REP', 'ST_CLERK')
	
-- 날짜 데이터 '' 사용
-- 고용일이 2014년 사원 조회(2014-01-01 ~ 2014-12-31)
SELECT
	*
FROM
	EMPLOYEES e
WHERE
	E.HIRE_DATE >= '2014-01-01'
	AND E.HIRE_DATE <= '2014-12-31'

SELECT *
FROM EMPLOYEES e 
WHERE E.HIRE_DATE BETWEEN '2014-01-01' AND '2014-12-31'

-- LIKE
-- LAST_NAME에 u가 포함되는 사원들의 사번, LAST_NAME조회
SELECT
	E.EMPLOYEE_ID,
	E.LAST_NAME
FROM
	EMPLOYEES e
WHERE
	e.LAST_NAME LIKE ('%u%')

-- LAST_NAME 의 4번째 글자가 A인 사원 들의 사번, LAST_NAME 조회
SELECT
	E.EMPLOYEE_ID,
	E.LAST_NAME
FROM
	EMPLOYEES e
WHERE
	e.LAST_NAME LIKE ('___a%')

-- LAST_NAME에 A 혹은 E글자가 있는 사원들의 사번, LAST_NAME 조회(LAST_NAME) 내림차순	
SELECT
	e.EMPLOYEE_ID ,
	e.LAST_NAME
FROM
	EMPLOYEES e
WHERE
	e.LAST_NAME LIKE ('%a%')
	OR e.LAST_NAME LIKE('%e%')
ORDER BY
	e.LAST_NAME DESC

-- LAST_NAME에 A 와 E글자가 있는 사원들의 사번, LAST_NAME 조회(LAST_NAME) 내림차순	
SELECT
	e.EMPLOYEE_ID ,
	e.LAST_NAME
FROM
	EMPLOYEES e
WHERE
	e.LAST_NAME LIKE ('%a%')
	and e.LAST_NAME LIKE('%e%')
ORDER BY
	e.LAST_NAME DESC
	
-- IS NULL 
-- 매니저가 없는 사원들의 LAST_NAME, JOB_ID 조회
SELECT
	E.LAST_NAME, E.JOB_ID
FROM
	EMPLOYEES e
WHERE
	E.MANAGER_ID IS NULL
	
-- ST_CLERK인 직업을 가진 사원이 없는 부서 번호 조회(단, 부서번호가 널 값인 부서 제외)
SELECT DISTINCT
	E.DEPARTMENT_ID
FROM
	EMPLOYEES e
WHERE
	E.JOB_ID != 'ST_CLERK'
	AND E.DEPARTMENT_ID IS NOT NULL

-- COMMISSION_PCT가 NULL 이 아닌 사원들 중에서 COMMISSION=SALARY * COMMISSION=_PCT 를 구한다
-- 계산결과와 함께 사번, FRIST_NAME, JOB_ID 출력

SELECT
	E.EMPLOYEE_ID,
	E.FIRST_NAME,
	E.JOB_ID,
	E.SALARY  * E.COMMISSION_PCT "COMMISSION"
FROM
	EMPLOYEES e
WHERE
	E.COMMISSION_PCT IS NOT NULL 
	
-- FIRST_NAME 이 'Curtis' 인 사람의 FIRST_NAME과 LAST_NAME,EMAIL,PHONE_NUMBER,JOB_ID 조회
-- 단 JOB_ID 결과는 소문자로 출력한다
SELECT e.FIRST_NAME, E.LAST_NAME, E.EMAIL, E.PHONE_NUMBER, LOWER(E.JOB_ID) "job_id"
FROM EMPLOYEES e 
WHERE E.FIRST_NAME = initcap('curtis')
	
-- 부서번호가 60,70, 80 ,90,인 사람의 사번, FIRST_NAME,LAST_NAME,HIRE_DATE,JOB_ID 조회
-- 단 JOB_ID가 IT_PROG 인 사원의 경우 '프로그래머' 로 변경하여 출력한다.
SELECT e.FIRST_NAME, e.LAST_NAME, e.HIRE_DATE, REPLACE(e.JOB_ID, 'IT_PROG', '프로그래머') "JOB_ID"
FROM EMPLOYEES e 
WHERE e.DEPARTMENT_ID IN (60,70,80,90)

-- JOB_ID 가 AD_PRES, PU_CLERK인 사원들의 사번, FIRST_NAME, LAST_NAME, 부서번호, JOB_ID 조회
-- 단 사원명은 FIRST_NAME,LAST_NAME 을 연결하여 출력한다(예 DOUGLAS GRANT)
SELECT E.DEPARTMENT_ID, E.FIRST_NAME || ' ' || E.LAST_NAME "name", E.JOB_ID, E.EMPLOYEE_ID
FROM EMPLOYEES e 
WHERE E.JOB_ID IN('AD_PRES',' P_CLERK')

-- 입사 10주년이 되는 날짜 출력
SELECT E.EMPLOYEE_ID, E.HIRE_DATE, E.FIRST_NAME, ADD_MONTHS(E.HIRE_DATE, 120)
FROM EMPLOYEES e 

-- 회사 내의 최대연봉 고 최소 연봉의 차이 조회
SELECT MAX(e.SALARY ), MIN(e.SALARY), MAX(e.SALARY ) - MIN(e.SALARY)
FROM EMPLOYEES e 

-- 매니저로 근무하는 사원들 숫자 조회
SELECT count(DISTINCT (e.MANAGER_ID))
FROM EMPLOYEES e

-- 부서별 직원 수 조회(오름차순)
-- 부서번호 직원 수
SELECT e.DEPARTMENT_ID , COUNT(e.DEPARTMENT_ID )
FROM EMPLOYEES e 
GROUP BY e.DEPARTMENT_ID 
ORDER BY e.DEPARTMENT_ID

-- 부서별 평균연봉 조회(부서번호 오름차순)
-- 부서번호 평균연봉(2215.45 => 2215)
SELECT e.DEPARTMENT_ID, avg(ROUND(e.SALARY))
FROM EMPLOYEES e 
GROUP BY e.DEPARTMENT_ID, e.SALARY
ORDER BY e.DEPARTMENT_ID


-- 동일한 직무를 가진 사원의 수 조회
-- job_id 인원수
SELECT e.JOB_ID, count(e.EMPLOYEE_ID)
FROM EMPLOYEES e 
GROUP BY e.JOB_ID
ORDER BY e.JOB_ID

 -- 직업 ID가 SA_MAN인 사원들의 최대 연봉보다 높게 받는 사원들의
 -- LAST_NAME, JOB_ID, SALARY 조회
 SELECT E.LAST_NAME , E.JOB_ID, E.SALARY
 FROM EMPLOYEES e 
 WHERE E.SALARY  > (SELECT MAX(E.SALARY)
 FROM EMPLOYEES e 
 WHERE E.JOB_ID  = 'SA_MAN')
 
 -- 커미션을 받는 사원들의 부서와 연봉이 동일한 사원들의 LAST_NAME, DEPERTMENT_ID, SALARY 조회
SELECT *
FROM EMPLOYEES e 
WHERE e.SALARY, e.e.DEPARTMENT_ID = (SELECT e.SALARY, e.DEPARTMENT_ID  FROM EMPLOYEES e WHERE e.COMMISSION_PCT)
 

 -- 회사 전체 평균 연봉보다 더 버는 사람들 중 LAST_NAME에 U가 있는
 -- 사원들이 근무하는 부서와 같은 부서에 근무하는 사원들의 
 -- 사번, LAST_NAME, SALARY 조회
			
 SELECT
	E.DEPARTMENT_ID,
	E.LAST_NAME,
	E .SALARY
FROM
	EMPLOYEES E
WHERE
	e.SALARY > (
	SELECT
			AVG(E.SALARY)
	FROM
			EMPLOYEES e)
	AND e.DEPARTMENT_ID = (
	SELECT
		E.DEPARTMENT_ID
	FROM
		EMPLOYEES e
	WHERE
		E.LAST_NAME LIKE '%U%')
 
 -- 각 부서별 평균 연봉보다 더 받는 동일부서 사원들의 LAST_NAME, SALARY
  -- DEPTNO, 해당 부서의 평균연봉 조회(부서별 평균연봉을 기준으로 오름차순)

 SELECT e.LAST_NAME, e.SALARY, e.DEPARTMENT_ID, avg(e.SALARY)
 FROM EMPLOYEES e 
 WHERE e.salary > (SELECT avg(e.SALARY)
 FROM EMPLOYEES e)
 GROUP BY e.SALARY 
 
 -- LAST_NAME 이 'Davies' 인 사람보다 나중에 고용된 사원들의 LAST_NAME, HIRE_DATE 조회
 
 SELECT E.LAST_NAME, E.HIRE_DATE
 FROM EMPLOYEES E 
 WHERE E.HIRE_DATE > (SELECT E.HIRE_DATE
 FROM EMPLOYEES e
 WHERE E.LAST_NAME = 'Davies')
 
 -- LAST_NAME 이 'KING'인 사원을 매니저로 두고 있는 모든 사원들의 LAST_NAME, SALARY 조회
 SELECT e.LAST_NAME, e.SALARY
 FROM EMPLOYEES e 
 WHERE e.MANAGER_ID in(SELECT e.MANAGER_ID 
 FROM EMPLOYEES e 
 WHERE e.LAST_NAME = 'King')
 
 -- LAST_NAME 아 'hall'인 사원과 동일한 연봉 및 커미션을 받는 사원들의 LAST_NAME, 부서번호, 연봉 조회
 -- 단, hall은 제외
 SELECT e.LAST_NAME, e.EMPLOYEE_ID, e.SALARY*12
 FROM EMPLOYEES e 
 WHERE e.salary = (SELECT e.SALARY
 FROM employees e
 where e.LAST_NAME = 'hall') AND e.COMMISSION_PCT = (SELECT e.COMMISSION_PCT
 FROM employees e
 where e.LAST_NAME = 'hall')
 
 -- LAST_NAME이 'ZLOTKEY'인 사원과 동일한 부서에서 근무하는 모든 사원들의 사번, 고용날짜 조회
 -- 단, 'ZLOTKEY' 제외
 
-- 부서가 위치한 지역의 국가 ID 및 국가명을 조회한다
-- LOCATION , DEPARTMENTS, CONTRIES 테이블 사용
 
 -- 위치 ID가 1700인 사원들의 연봉과 커미션을 추출한 뒤, 추출된 사원들의 연봉과 커미션이 동일한 사원정보 출력
 -- 출력 : 사번,이름(FIRST_NAME + LAST_NAME), 부서번호, 급여